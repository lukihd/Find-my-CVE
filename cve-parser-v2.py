from sys import argv
import re
import datetime
from pymongo import MongoClient, errors

# Command line arguments
path = argv[1]

# Variable
key = ["version", "number", "cve_id", "cwe_id", "vulnerability_type", "publish_date", "update_date", "score",
       "gained_access_level", "access", "access_complexity", "authentification", "confidentiality_impact",
       "integrity_impact", "availibity_impact", "description"]
cveList = []
count = 0
version = ""

"""
@function mongoConn -- Connecting to the server's database
@param uri -- Uri of mongodb server
@param database -- Name of the database to connect
"""


def mongoConn(uri, database):
    try:
        print("Trying to connect to mongodb server")
        Client = MongoClient(uri, serverSelectionTimeoutMS=2000)
        print("Connection established")
        pass
    except errors.ServerSelectionTimeoutError as err:
        print("pymongo ERROR:", err)
        return

    try:
        print("Trying to connect to " + database)
        db = Client[database]
        print("Connection established")
        return db
    except errors.ConnectionFailure as err:
        print("pymongo ERROR:", err)
        return


# Read the input file of cve raw data
with open(path, 'r+') as f:
    for line in f:
        # allow testing each line easily
        line_close = False

        # Get tech version
        if "<" in line and ">" in line:
            version = line
            is_version = True
        else:
            is_version = False

        # create at index 0 the version who's refer this CVE
        if count == 0:
            if is_version:
                document = {key[0]: version[1:-2].rstrip("\n\r")}
                count += 1
                line_close = True
            else:
                document = {key[0]: version[1:-2].rstrip("\n\r")}
                count += 1
                line_close = False

        # create at index 1 an iterable number of CVE for this version
        if count == 1 and line_close is False:
            document[key[1]] = line[9:-2].rstrip("\n\r")
            count += 1
            line_close = True

        # match cve id type
        if count == 2 and line_close is False:
            if re.match('^(CVE-)\d{4}(-)\d{4,}(")$', line[9:-2].rstrip("\n\r")):
                document[key[2]] = line[9:-2].rstrip("\n\r")[:-1]
                count += 1
                line_close = True
            else:
                document[key[2]] = 'None'
                count += 1
                line_close = False

        # match cwe id
        if count == 3 and line_close is False:
            if re.match('^\d{1,3}(")$', line[9:-2].rstrip("\n\r")):
                document[key[3]] = line[9:-2].rstrip("\n\r")[:-1]
                count += 1
                line_close = True
            else:
                document[key[3]] = 'None'
                count += 1
                line_close = False

        # match vulnerability type
        if count == 4 and line_close is False:
            if re.match(
                    '^(DoS)|(Exec Code)|(Overflow)|(Mem. Corr.)|(Sql)|(XSS)|(Dir. Trav.)|(Http R.Spl.)|(Bypass)|([+]Info)|([+]Priv)|(CSRF)|(File Inclusion)$',
                    line[9:-2].rstrip("\n\r")):
                document[key[4]] = line[9:-2].rstrip("\n\r")
                count += 1
                line_close = True
            else:
                count += 1
                document[key[4]] = 'None'
                line_close = False

        # match date format publish date
        if count == 5 and line_close is False:
            if re.match('^\d{4}(-)\d{2}(-)\d{2}$', line[9:-2].rstrip("\n\r")):
                publish_date_raw = line[9:-2].rstrip("\n\r").split('-')
                publish_date = datetime.date(int(publish_date_raw[0]), int(publish_date_raw[1]),
                                             int(publish_date_raw[2]))
                document[key[5]] = str(publish_date)
                count += 1
                line_close = True

        # match date format update date
        if count == 6 and line_close is False:
            if re.match('^\d{4}(-)\d{2}(-)\d{2}$', line[9:-2].rstrip("\n\r")):
                update_date_raw = line[9:-2].rstrip("\n\r").split('-')
                update_date = datetime.date(int(update_date_raw[0]), int(update_date_raw[1]),
                                            int(update_date_raw[2]))
                document[key[6]] = str(update_date)
                count += 1
                line_close = True

        # other line of the script that aren't missing in cve raw data
        if 6 < count <= 14 and line_close is False:
            document[key[count]] = line[9:-2].rstrip("\n\r")
            count += 1
            line_close = True

        # fill the latest rows
        if count == 15 and line_close is False:
            document[key[count]] = line[9:-2].rstrip("\n\r")
            line_close = True

        # create document when it's full
        if len(document) == 16:
            count = 0
            cveList.append(document)

# test de la bdd
db = mongoConn("mongodb://root:password@localhost:27017/?authSource=admin", "find_my_cve")
# récupération de la collection mongodb
cve_collection = db['cve']
# envoi des documents dans la collection "cve"
res = cve_collection.insert_many(cveList)