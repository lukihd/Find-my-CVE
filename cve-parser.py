from sys import argv
from time import sleep, time
from pymongo import MongoClient, errors
import datetime
import re

# Command line arguments
path = argv[1]

# Variable
key = ["version","number", "cve_id", "cwe_id", "vulnerability_type", "publish_date", "update_date", "score", "gained_access_level", "access", "access_complexity", "authentification", "confidentiality_impact", "integrity_impact", "availibity_impact", "description"]
cveList = []

"""
@function mongoConn -- Connecting to the server's database
@param uri -- Uri of mongodb server
@param database -- Name of the database to connect
"""
def mongoConn(uri, database):
  try:
    print("Trying to connect to mongodb server")
    Client = MongoClient(uri, serverSelectionTimeoutMS = 2000)
    print("Connection established")
    pass
  except errors.ServerSelectionTimeoutError as err:
    print ("pymongo ERROR:", err)
    return
  
  try:
    print("Trying to connect to " + database)
    db = Client[database]
    print("Connection established")
    return db
  except errors.ConnectionFailure as err:
    print ("pymongo ERROR:", err)
    return

"""
@function Reader -- Format CVE input to proper JSON format
@param path -- Path of the file containing CVE of the "cve-dl.sh" script
"""
def Formater(path):
  count = 0
  version = ""
  with open(path, 'r+') as f:
    for line in f:
      # Get format version
      if "<" in line and ">" in line:
        version = line
      # create at index 0 the version who's refer this CVE
      if count == 0:
        document = {}
        document['version'] = version[1:-2].rstrip("\n\r")
        count += 1
      # create at index 1 an iterable number of CVE for this version
      elif count == 1:
        document['number'] = line[9:-2].rstrip("\n\r")
        count += 1
      # save the publish date of the CVE to verify it's at the right place in the document
      elif count == 5 and keyChecker(key, line[9:-2].rstrip("\n\r")) == "date":
        tempDate = line[9:-2].rstrip("\n\r").split('-')
        publish_date = datetime.date(tempDate[0], tempDate[1], tempDate[2])
      # comapare the publish and update date to see if there no problem between them and place them in the document
      elif count == 6 and keyChecker(key, line[9:-2].rstrip("\n\r")) == "date":
        update_date_raw = line[9:-2].rstrip("\n\r")
        tempDate2 = line[9:-2].rstrip("\n\r").split('-')
        update_date = datetime.date(tempDate2[0], tempDate2[1], tempDate2[2])
        if publish_date <= update_date:
          document['publish_date'] = update_date_raw
          document['update_date'] = line[9:-2].rstrip("\n\r")
        else:
          print("Error")
      # create a document every 15 rows
      elif count > 15:
        count = 0
        cveList.append(document)
      # for all other case that only needs regex verification 
      else:
        res = keyChecker(key, line[9:].rstrip("\n\r"))
        if res == "None":
          document[key[count]] = res
        else:
          document[res[0]] = res[1]
        print(document)

def keyChecker(key, value):
  if re.match('^(CVE-)\d{4}(-)\d{4,}$', value):
    return [key[2], value]
  elif re.match('^\d{1,3}$', value):
    return [key[3], value]
  elif re.match('^(DoS)|(Exec Code)|(Overflow)|(Mem. Corr.)|(Sql)|(XSS)|(Dir. Trav.)|(Http R.Spl.)|(Bypass)|([+]Info)|([+]Priv)|(CSRF)|(File Inclusion)$', value):
    return [key[4], value]
  elif re.match('^\d{4}(-)\d{2}(-)\d{2}$', value):
    return ["date", value]
  else:
    print(value)
    return "None"



db = mongoConn("mongodb://root:password@localhost:27017/?authSource=admin", "findmycve")

Formater(path)